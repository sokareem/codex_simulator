# Optimized tasks.yaml

# General Research Tasks
research_task:
  description: >
    Conduct thorough research on the topic: '{topic}'.
    Identify key developments, current trends, significant factual information, and notable opinions or analyses.
    Ensure information is relevant to the current year: {current_year}.
  expected_output: >
    A concise, well-organized list of 10-15 bullet points summarizing the most relevant and impactful
    findings about {topic}. Each point should be distinct and informative, suitable for
    initiating a detailed report or answering specific questions. Include sources where possible.
  agent: researcher
  async_execution: false # Set to true if you want this to run in parallel with other tasks if appropriate

reporting_task:
  description: >
    Based on the provided research findings (context from `research_task` or other inputs) on '{topic}',
    create a comprehensive and well-structured report.
    Expand each key finding or data point into a detailed section, providing supporting information,
    analysis, examples, and implications where appropriate.
  expected_output: >
    A fully fledged report in clean markdown format. The report should include:
    1.  An Introduction/Executive Summary.
    2.  Detailed sections for each major finding or aspect of the topic, with in-depth explanations and analysis.
    3.  A Conclusion summarizing key takeaways or recommendations.
    The output should be a single markdown text, without '```markdown' or '```' wrapping the entire content.
  agent: reporting_analyst
  async_execution: false

# Claude Code Terminal Assistant Tasks
process_command_task:
  description: >
    Process the user's terminal input: "{user_command}".
    Analyze the intent: Is it for file navigation, code execution, web research, general knowledge, or complex research?
    Current working directory is: {cwd}.
    User profile and preferences: {user_context}.
    Based on the intent, formulate a precise plan. This might involve:
    1.  Directly answering a simple query if possible.
    2.  Delegating to FileNavigator for file system operations.
    3.  Delegating to CodeExecutor for running code/commands.
    4.  Delegating to WebResearcher for quick web lookups.
    5.  Delegating to SeniorDataResearcher for in-depth research requests.
  expected_output: >
    A clear plan of action. This should be one of:
    a) The direct answer to the user's query if handled immediately.
    b) A precise delegation instruction for the appropriate specialist agent (FileNavigator, CodeExecutor, WebResearcher, or SeniorDataResearcher), including all necessary context for them to perform their task.
    c) Confirmation of understanding and a request for clarification if the intent is ambiguous.
    If a file system operation that changes the CWD is anticipated or completed by an agent, the new CWD must be noted and communicated back for state management.
  agent: terminal_commander
  async_execution: false

navigate_files_task:
  description: >
    Perform a file system operation based on the user's request: "{file_request}".
    This may involve listing directory contents, reading a specific file, or changing the current working directory.
    The current working directory for operational context is: {cwd}.
    If the request involves writing to a file, creating a file/directory, or deleting a file/directory,
    ensure that EXPLICIT user permission for THIS SPECIFIC action was clearly obtained in the '{file_request}'
    or preceding context. If not, state that permission is required.
  expected_output: >
    A confirmation of the action taken (e.g., 'Successfully changed directory to /path/to/new_dir and updated CWD.',
    'Contents of file_name.txt displayed.', 'Directory listing for /path/to/dir provided.').
    If a file was read, include its content.
    If a write/create/delete operation was requested but permission was not confirmed, state clearly:
    "Action [specific action] not performed on [target] due to lack of explicit user permission."
    If the CWD was changed, the output must include the new, absolute CWD.
  agent: file_navigator
  async_execution: false

execute_code_task:
  description: >
    Securely execute the following code snippet or shell command: "{code_snippet}".
    The execution context (current working directory) is: {cwd}.
    Strictly validate the command against allowed patterns and safety protocols defined in the SafeShellTool
    before execution. Do NOT execute if it violates safety rules (e.g., attempts blacklisted commands,
    unauthorized file access, or network operations if restricted).
  expected_output: >
    The standard output (stdout) and standard error (stderr) from the executed command.
    If the command was blocked for safety reasons, provide a clear, polite explanation of why it was blocked
    (e.g., "Command '{command_name}' is not allowed for security reasons.").
    If the command implies a persistent change in the environment that the user should be aware of
    (e.g., a package installation via an allowed pip command), briefly note this.
  agent: code_executor
  async_execution: false

web_search_task:
  description: >
    Conduct an internet search for: "{search_query}".
    Prioritize fetching factual, up-to-date information from reliable sources.
    If the query is a question, aim to find a direct answer.
    If it's a general topic, provide a concise summary of key information.
  expected_output: >
    A concise answer to the search query, or a summary of the information found.
    Directly extract and present key details and structured data if appropriate
    (e.g., for a query like 'weather in Chicago', provide specific details such as temperature,
    conditions, wind speed, humidity). Cite sources (URLs) if the information is directly quoted,
    is a statistic, or from a specific, identifiable origin.
  agent: web_researcher
  async_execution: false

profile_task:
  description: >
    Profile the execution time of a shell command.
    Input: {command}. The ExecutionProfilerTool will execute this command
    and measure its duration and success status.
  expected_output: >
    A JSON object with fields: status ('success' or 'error'), duration_s (float), 
    and result (output or error message from the command execution).
  agent: performance_monitor
  async_execution: false